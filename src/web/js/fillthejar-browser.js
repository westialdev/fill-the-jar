/**
 * Do not edit this file. It is automatically created from the original one.
 * Edit [./fillthejar.js](./fillthejar.js) and execute the browserify command:
 * ```
 * browserify src/web/js/fillthejar.js -o src/web/js/fillthejar-browser.js
 * ```
 */
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

exports.TurnOnWater = function create(water) {
    return async () => {
        water.turnOn();
    };
};

},{}],2:[function(require,module,exports){
'use strict';

exports.WatchWater = function create(water) {
    return async () => {
        if (water.isFalling() && water.isMaxGot()) water.turnOff();
    };
};
},{}],3:[function(require,module,exports){
'use strict';

exports.Water = function create(implementation) {
    const isFalling = () => {throw new Error("Not implemented")};
    const turnOn = () => {throw new Error("Not implemented")};
    const turnOff = () => {throw new Error("Not implemented")};
    const isMaxGot = () => {throw new Error("Not implemented")};
    return {
        turnOn,
        turnOff,
        isFalling,
        isMaxGot,
        ...implementation
    };
};
},{}],4:[function(require,module,exports){
'use strict';

const {WatchWater} = require("../../core/watchwater");
const {Water} = require("../../core/water/water");
const {TurnOnWater} = require("../../core/turnonwater");

const BrowserWater = function create(secondsFalling, displayFallFn, displayGotMaxFn) {
    let falling = false;
    let turnedOnAt;
    const __now = () => Math. round((new Date()). getTime() / 1000);

    const isFalling = () => falling;
    const turnOn = () => {
        displayFallFn();
        turnedOnAt = __now();
        falling = true;
    };
    const turnOff = () => {
        displayGotMaxFn();
        falling = false;
    };
    const isMaxGot = () => {
        return __now() - secondsFalling > turnedOnAt;
    };

    return {
        turnOn,
        turnOff,
        isFalling,
        isMaxGot,
    };
}
const browserWater = BrowserWater(
    5,
    () => document.getElementById("filling").style.display = "block",
    () => {
        document.getElementById("filling").style.display = "none";
        document.getElementById("full").style.display = "block";
    },
);

window.turnOn = TurnOnWater(Water(browserWater));
window.watchWater = WatchWater(Water(browserWater));

},{"../../core/turnonwater":1,"../../core/watchwater":2,"../../core/water/water":3}]},{},[4]);
